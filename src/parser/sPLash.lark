//
// sPLash Grammar
//

// Program
start: (declaration | definition)* main_body

// Declarations
?declaration: (function_declaration | var_declaration) ";"
function_declaration: ID type parameters
var_declaration: ID type | ID "[" type "]"

// Definitions
?definition: function_def | value_def
function_def: ID type  parameters block
value_def: ID type "=" expression ";"

// Main
main_body: ID type parameters block

// Block
block: "{" statement* "}"

// Statements
?statement: (ID type "=" expression ";")   -> local_def_statement
         | ("return" expression ";")       -> return_statement
         | if_statement
         | while_statement
         | assignment
         | (expression ";")                -> exp_statement


if_statement: "if" expression block ("else" block)?
while_statement: "while" expression block

assignment: ID "=" expression ";"

// Parameters and Argument
parameters: "(" ( (ID  type ) ("," ID type)*)? ")"
func_arguments: "(" (expression ("," expression)*)? ")"

// Types
?type: ":" ID ("where" expression)?            -> singleton_type
    | ":" "[" ID "]" ("where" expression)?     -> array_type

// Expressions

?expression: value
          | index_access
          | function_return
          | binary_op
          | unary_op
          | "(" expression ")"

?value: ID                           
     | FLOATLIT                     
     | SIGNED_FLOAT                 
     | INTLIT                       
     | SIGNED_INT                   
     | STRING                       
     | "true"                       
     | "false"                      

function_return: ID func_arguments

index_access: ID "[" expression "]"                   -> index_access
            | function_return "[" expression "]"      -> index_access_func


unary_op: "!" expression -> unary_not

binary_op: expression "*" expression     -> bin_multiplication
         | expression "/" expression     -> bin_divison
         | expression "+" expression     -> bin_plus
         | expression "-" expression     -> bin_minus
         | expression "%" expression     -> bin_modulus
         | expression "==" expression    -> bin_equals
         | expression "!=" expression    -> bin_not_equals
         | expression ">=" expression    -> bin_greather_equals
         | expression ">"  expression    -> bin_greather
         | expression "<=" expression    -> bin_less_equals
         | expression "<"  expression    -> bin_less
         | expression "&&" expression    -> bin_and
         | expression "||" expression    -> bin_or

//
// sPLash Terminals
//

// Integer Literals

%import common.INT
INTLIT: INT ("_" INT)*
SIGNED_INT: ("+" | "-") INTLIT

// Float Literals

%import common.DECIMAL -> FLOATLIT
SIGNED_FLOAT: ("+" | "-") FLOATLIT

// Identifier

%import common.CNAME -> ID

// Strings

%import common.ESCAPED_STRING -> STRING

// Multi-line comments

MULTICOMMENT:  "(*" /.*?/s "*)"
%ignore MULTICOMMENT

// Whitespace

%import common.WS
%ignore WS
