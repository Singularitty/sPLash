//
// sPLash Grammar
//

// Program
start: (declaration | definition)* main_body

// Declarations
declaration: (function_declaration | var_declaration) ";"
function_declaration: ID type req_arguments
var_declaration: ID type

// Definitions
definition: function_def | value_def
function_def: ID type  req_arguments block
value_def: ID type "=" expression ";"

// Main
main_body: "main" type req_arguments block

// Block
block: "{" statement* "}"

// Statements
?statement: value_def
         | ("return" expression ";") -> return_statement
         | if_statement
         | while_statement
         | assignment
         | (expression ";")          -> exp_statement


if_statement: "if" expression block ("else" block)?
while_statement: "while" expression block

assignment: ID "=" expression ";"

// Argument List
req_arguments: "(" (ID  type ("," ID type)*)? ")"
func_arguments: "(" (expression ("," expression)*)? ")"

// Types
type: ":" ID refinement? 
refinement: "where" expression

// Expressions

expression: value
          | index_access
          | function_return
          | binary_op
          | unary_op

value: ID                           -> id
     | FLOATLIT                     -> u_float
     | SIGNED_FLOAT                 -> float
     | INTLIT                       -> u_int
     | SIGNED_INT                   -> int
     | STRING                       -> string
     | "true"                       -> true
     | "false"                      -> false

function_return: ID "(" func_arguments ")"

index_access: ID "[" expression "]"                   -> index_access
            | ID func_arguments "[" expression "]"    -> index_access_func


unary_op: "!" expression -> not

binary_op: expression "+" expression     -> plus
         | expression "-" expression     -> minus
         | expression "*" expression     -> multiplication
         | expression "/" expression     -> divison
         | expression "%" expression     -> modulus
         | expression "==" expression    -> equals
         | expression "!=" expression    -> not_equals
         | expression ">=" expression    -> greather_equals
         | expression ">"  expression    -> greather
         | expression "<=" expression    -> less_equals
         | expression "<"  expression    -> less
         | expression "&&" expression    -> and
         | expression "||" expression    -> or

//
// sPLash Terminals
//

// Integer Literals

%import common.INT
INTLIT: INT ("_" INT)*
SIGNED_INT: ("+" | "-") INTLIT

// Float Literals

%import common.DECIMAL -> FLOATLIT
SIGNED_FLOAT: ("+" | "-") FLOATLIT

// Identifier

%import common.CNAME -> ID

// Strings

%import common.ESCAPED_STRING -> STRING

// Multi-line comments

MULTICOMMENT: "(*" /(.|\n)*/ "*)"
%ignore MULTICOMMENT

// Whitespace

%import common.WS
%ignore WS